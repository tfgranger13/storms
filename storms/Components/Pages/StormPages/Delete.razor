@page "/storms/delete"
@using Microsoft.EntityFrameworkCore
@using storms.Models
@inject IDbContextFactory<Storms.Data.StormContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Storm</h2>
    <hr />
    @if (storm is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Basin</dt>
            <dd class="col-sm-10">@storm.Basin</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CycloneNumber</dt>
            <dd class="col-sm-10">@storm.CycloneNumber</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Year</dt>
            <dd class="col-sm-10">@storm.Year</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@storm.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Longitude</dt>
            <dd class="col-sm-10">@storm.Longitude</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Latitude</dt>
            <dd class="col-sm-10">@storm.Latitude</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">IsLandfall</dt>
            <dd class="col-sm-10">@storm.IsLandfall</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">LandfallDateTime</dt>
            <dd class="col-sm-10">@storm.LandfallDateTime</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">MaxWindSpeed</dt>
            <dd class="col-sm-10">@storm.MaxWindSpeed</dd>
        </dl>
        <EditForm method="post" Model="storm" OnValidSubmit="DeleteStorm" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(storm is null)">Delete</button> |
            <a href="/storms">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Storm? storm;

    [SupplyParameterFromQuery]
    private string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        storm = await context.Storm.FirstOrDefaultAsync(m => m.Id == Id);

        if (storm is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteStorm()
    {
        using var context = DbFactory.CreateDbContext();
        context.Storm.Remove(storm!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/storms");
    }
}
