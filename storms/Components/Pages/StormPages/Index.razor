@page "/storms"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using storms.Models
@using Storms.Data
@implements IAsyncDisposable
@inject IDbContextFactory<Storms.Data.StormContext> DbFactory
@rendermode InteractiveServer

<PageTitle>Storms</PageTitle>

<h1>Storms</h1>

<p>
The following table lists all storms that have made landfall in Florida since 1900.<br />
The maximum wind speed is provided in knots (1 knot = 1.15078 miles per hour).
</p>

<p>
You can access this data through the Get Storms API by clicking the link in the nav bar or using the endpoint "/storms_api".
</p>

<p><a href="/Data/parsed_HURDAT2.csv" download>Download Storm Data (CSV)</a></p>

<div>
    <div>
        <label for="yearFilter">Filter by Date:</label>
        <input type="search" @bind="yearFilter" @bind:event="oninput" />
    </div>
    <div>
        <label for="nameFilter">Filter by Name:</label>
        <input type="search" @bind="nameFilter" @bind:event="oninput" />
    </div>
</div>

<QuickGrid Class="table" Items="FilteredStorms" Pagination="pagination">
    <PropertyColumn Property="storm => storm.Name" Sortable="true" />
    <PropertyColumn Property="storm => storm.LandfallDate" Sortable="true" Title="Date of Landfall" IsDefaultSortColumn="true" InitialSortDirection="SortDirection.Ascending" />
    <PropertyColumn Property="storm => storm.MaxWindSpeed" Sortable="true" Title="Maximum Wind Speed (knots)" />
</QuickGrid>
<Paginator State="pagination" />

@code {
    private StormContext context = default!;

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();

    PaginationState pagination = new PaginationState { ItemsPerPage = 25 };

    private string nameFilter = string.Empty;
    private string yearFilter = string.Empty;

    private IQueryable<Storm> FilteredStorms => 
        context.Storm.Where(s => s.Name!.Contains(nameFilter.ToUpper()) && s.LandfallDate.ToString().Contains(yearFilter) 
        );
}
